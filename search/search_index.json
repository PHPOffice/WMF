{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>WMF is a library written in pure PHP that provides a set of classes to read WMF based file (like <code>.wmf</code> or <code>.emf</code> files).</p> <p>WMF is an open source project licensed under the terms of MIT. WMF is aimed to be a high quality software product by incorporating continuous integration and unit testing. You can learn more about WMF by reading this Developers'Documentation and the API Documentation</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li> <p>Read files</p> <ul> <li>WMF files</li> <li>(EMF files, not for the moment)</li> <li>(EMF+ files, not for the moment)</li> </ul> </li> </ul>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>We welcome everyone to contribute to WMF. Below are some of the things that you can do to contribute:</p> <ul> <li>Fork us and request a pull to the master branch</li> <li>Submit bug reports or feature requests to GitHub</li> <li>Follow @PHPOffice on Twitter</li> </ul>"},{"location":"credits.html","title":"Credits","text":""},{"location":"credits.html#references","title":"References","text":""},{"location":"credits.html#wmf","title":"WMF","text":""},{"location":"credits.html#emf","title":"EMF","text":""},{"location":"credits.html#emf_1","title":"EMF+","text":""},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#requirements","title":"Requirements","text":"<p>Mandatory:</p> <ul> <li>PHP 7.1+</li> </ul>"},{"location":"install.html#installation_1","title":"Installation","text":""},{"location":"install.html#using-composer","title":"Using Composer","text":"<p>To install via Composer, add the following lines to your <code>composer.json</code>:</p> <pre><code>{\n    \"require\": {\n        \"phpoffice/wmf\": \"dev-master\"\n    }\n}\n</code></pre>"},{"location":"changes/0.1.0.html","title":"0.1.0","text":""},{"location":"changes/0.1.0.html#enhancements","title":"Enhancements","text":"<ul> <li>Initial version by @Progi1984</li> <li>Enable/Disable Exceptions in #3 by @Progi1984</li> </ul>"},{"location":"changes/0.1.0.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>N/A</li> </ul>"},{"location":"changes/0.1.0.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Github Action : PHP (PHPCSFixer / PHPStan / PHPUnit) in #1 by @Progi1984</li> <li>Refactored WMF Reader in #2 by @Progi1984</li> <li>Github Action : Documentation in #4 by @Progi1984</li> </ul>"},{"location":"changes/0.1.1.html","title":"0.1.1","text":""},{"location":"changes/0.1.1.html#enhancements","title":"Enhancements","text":"<ul> <li>Load a WMF file from a string in #5 by @Progi1984</li> </ul>"},{"location":"changes/0.1.1.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>N/A</li> </ul>"},{"location":"changes/0.1.1.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>N/A</li> </ul>"},{"location":"changes/0.1.2.html","title":"0.1.2","text":""},{"location":"changes/0.1.2.html#enhancements","title":"Enhancements","text":"<ul> <li>WMF\\Reader\\WMF\\Magic : Backends sorted by priority in #6 by @Progi1984</li> </ul>"},{"location":"changes/0.1.2.html#bug-fixes","title":"Bug fixes","text":"<ul> <li>N/A</li> </ul>"},{"location":"changes/0.1.2.html#miscellaneous","title":"Miscellaneous","text":"<ul> <li>N/A</li> </ul>"},{"location":"usage/wmf.html","title":"WMF","text":"<p>You can load <code>.wmf</code> files.</p>"},{"location":"usage/wmf.html#backends","title":"Backends","text":"<p>You can one of two current backends : <code>gd</code> or <code>imagick</code>. If you don't know which one used, you can use the magic one.</p> <p>By default, the order of the backends is Imagick, followed by GD. Each backend is tested on different criteria: extension loaded, format support.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\GD;\nuse PhpOffice\\WMF\\Reader\\WMF\\Imagick;\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n// Choose which backend you want\n$reader = new GD();\n$reader = new Imagick();\n$reader = new Magic();\n\n$reader-&gt;load('sample.wmf');\n</code></pre> <p>For next samples, I will use the magic one.</p>"},{"location":"usage/wmf.html#getbackends","title":"<code>getBackends</code>","text":"<p>This specific method for <code>Magic::class</code> returns backends sorted by priority.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n\nvar_dump($reader-&gt;getBackends());\n</code></pre>"},{"location":"usage/wmf.html#setbackends","title":"<code>setBackends</code>","text":"<p>This specific method for <code>Magic::class</code> defines backends sorted by priority.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\GD;\nuse PhpOffice\\WMF\\Reader\\WMF\\Imagick;\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n$reader-&gt;setBackends([\n  GD::class,\n  Imagick::class,\n]);\n\nvar_dump($reader-&gt;getBackends());\n</code></pre>"},{"location":"usage/wmf.html#methods","title":"Methods","text":""},{"location":"usage/wmf.html#getresource","title":"<code>getResource</code>","text":"<p>The method returns the resource used in internal by the library.</p> <p>The <code>GD</code> backend returns a <code>GDImage</code> object or resource, depending the PHP version. The <code>Imagick</code> backend returns a <code>Imagick</code> object.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n$reader-&gt;load('sample.wmf');\n\nvar_dump($reader-&gt;getResource());\n</code></pre>"},{"location":"usage/wmf.html#getmediatype","title":"<code>getMediaType</code>","text":"<p>The method returns the media type for a WMF file.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n\n$mediaType = $reader-&gt;getMediaType();\n\necho 'The media type for a WMF file is ' . $$mediaType;\n</code></pre>"},{"location":"usage/wmf.html#iswmf","title":"<code>isWMF</code>","text":"<p>The method returns if the file is supported by the library.</p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n$reader-&gt;load('sample.wmf');\n\n$isWMF = $reader-&gt;isWMF();\n\necho 'The file sample.wmf ' . ($isWMF ? 'is a WMF file' : 'is not a WMF file');\n</code></pre>"},{"location":"usage/wmf.html#load","title":"<code>load</code>","text":"<p>The method loads a WMF file in the object. The method returns <code>true</code> if the file has been correctly loaded, or <code>false</code> if it has not. </p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n$reader-&gt;load('sample.wmf');\n</code></pre>"},{"location":"usage/wmf.html#loadfromstring","title":"<code>loadFromString</code>","text":"<p>The method loads a WMF file in the object from a string. The method returns <code>true</code> if the file has been correctly loaded, or <code>false</code> if it has not. </p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n$reader-&gt;loadFromString(file_get_contents('sample.wmf'));\n</code></pre>"},{"location":"usage/wmf.html#save","title":"<code>save</code>","text":"<p>The method transforms the loaded WMF file in an another image. </p> <pre><code>&lt;?php\n\nuse PhpOffice\\WMF\\Reader\\WMF\\Magic;\n\n$reader = new Magic();\n$reader-&gt;load('sample.wmf');\n$reader-&gt;save('sample.png', 'png');\n</code></pre>"}]}